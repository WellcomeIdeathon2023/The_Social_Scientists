survey_data[month, "Against"] <- new_against
survey_data[month, "Undecided"] <- new_undecided
}
# Display the resulting survey data
survey_data
View(survey_data)
# Set the seed for reproducibility
set.seed(42)
# Define the start and end dates
start_date <- as.Date("2020-01-01")
end_date <- as.Date("2022-11-01")
# Define the initial sentiment percentages
initial_for <- 50
initial_against <- 40
initial_undecided <- 10
# Create a sequence of monthly dates
dates <- seq(start_date, end_date, by = "month")
# Initialize an empty data frame
survey_data <- data.frame(Month = character(length(dates)),
For = numeric(length(dates)),
Against = numeric(length(dates)),
Undecided = numeric(length(dates)))
# Generate data for each month
for (month in 1:length(dates)) {
# Get the sentiment percentages of the previous month
if (month == 1) {
prev_month <- c(initial_for, initial_against, initial_undecided)
} else {
prev_month <- survey_data[month - 1, c("For", "Against", "Undecided")]
}
# Generate random percentage changes for each sentiment category
change_for <- sample(-10:10, 1)
change_against <- sample(-10:10, 1)
change_undecided <- -(change_for + change_against)
# Calculate the new sentiment percentages
new_for <- prev_month["For"] + change_for
new_against <- prev_month["Against"] + change_against
new_undecided <- prev_month["Undecided"] + change_undecided
# Ensure the percentages stay within the range of 0 to 100
new_for <- pmax(pmin(new_for, 100), 0)
new_against <- pmax(pmin(new_against, 100), 0)
new_undecided <- pmax(pmin(new_undecided, 100), 0)
# Store the month and sentiment percentages in the data frame
survey_data[month, "Month"] <- format(dates[month], "%b_%Y")
survey_data[month, "For"] <- new_for
survey_data[month, "Against"] <- new_against
survey_data[month, "Undecided"] <- new_undecided
}
# Display the resulting survey data
survey_data
View(survey_data)
# Set the seed for reproducibility
set.seed(42)
# Define the start and end dates
start_date <- as.Date("2020-01-01")
end_date <- as.Date("2022-11-01")
# Define the initial sentiment percentages
initial_for <- 50
initial_against <- 40
initial_undecided <- 10
# Create a sequence of monthly dates
dates <- seq(start_date, end_date, by = "month")
# Initialize an empty data frame
survey_data <- data.frame(Month = character(length(dates)),
For = numeric(length(dates)),
Against = numeric(length(dates)),
Undecided = numeric(length(dates)))
# Generate data for each month
for (month in 1:length(dates)) {
# Get the sentiment percentages of the previous month
if (month == 1) {
prev_month <- c(initial_for, initial_against, initial_undecided)
} else {
prev_month <- survey_data[month - 1, c("For", "Against", "Undecided")]
}
# Generate random percentage changes for each sentiment category
change_for <- sample(-10:10, 1)
change_against <- sample(-10:10, 1)
change_undecided <- -(change_for + change_against)
# Calculate the new sentiment percentages
new_for <- prev_month["For"] + change_for
new_against <- prev_month["Against"] + change_against
new_undecided <- prev_month["Undecided"] + change_undecided
# Ensure the percentages stay within the range of 0 to 100
new_for <- pmax(pmin(new_for, 100), 0)
new_against <- pmax(pmin(new_against, 100), 0)
new_undecided <- pmax(pmin(new_undecided, 100), 0)
# Store the month and sentiment percentages in the data frame
survey_data[month, "Month"] <- format(dates[month], "%b_%Y")
survey_data[month, "For"] <- new_for
survey_data[month, "Against"] <- new_against
survey_data[month, "Undecided"] <- new_undecided
}
# Display the resulting survey data
survey_data
View(survey_data)
# Set the seed for reproducibility
set.seed(42)
# Define the start and end dates
start_date <- as.Date("2020-01-01")
end_date <- as.Date("2022-11-01")
# Define the initial sentiment percentages
initial_for <- 50
initial_against <- 40
initial_undecided <- 10
# Create a sequence of monthly dates
dates <- seq(start_date, end_date, by = "month")
# Initialize an empty data frame
survey_data <- data.frame(Month = character(length(dates)),
For = integer(length(dates)),
Against = integer(length(dates)),
Undecided = integer(length(dates)),
stringsAsFactors = FALSE)
# Generate data for each month
for (month in 1:length(dates)) {
# Get the sentiment percentages of the previous month
if (month == 1) {
prev_month <- c(initial_for, initial_against, initial_undecided)
} else {
prev_month <- survey_data[month - 1, c("For", "Against", "Undecided")]
}
# Generate random percentage changes for each sentiment category
change_for <- sample(-10:10, 1)
change_against <- sample(-10:10, 1)
change_undecided <- -(change_for + change_against)
# Calculate the new sentiment percentages
new_for <- prev_month[1] + change_for
new_against <- prev_month[2] + change_against
new_undecided <- prev_month[3] + change_undecided
# Ensure the percentages stay within the range of 0 to 100
new_for <- pmax(pmin(new_for, 100), 0)
new_against <- pmax(pmin(new_against, 100), 0)
new_undecided <- pmax(pmin(new_undecided, 100), 0)
# Store the month and sentiment percentages in the data frame
survey_data[month, "Month"] <- format(dates[month], "%b_%Y")
survey_data[month, "For"] <- new_for
survey_data[month, "Against"] <- new_against
survey_data[month, "Undecided"] <- new_undecided
}
# Display the resulting survey data
survey_data
View(survey_data)
# Set the seed for reproducibility
set.seed(42)
# Load the required library
library(ggplot2)
# Define the start and end dates
start_date <- as.Date("2020-01-01")
end_date <- as.Date("2022-11-01")
# Define the initial sentiment percentages
initial_for <- 50
initial_against <- 40
initial_undecided <- 10
# Create a sequence of monthly dates
dates <- seq(start_date, end_date, by = "month")
# Initialize an empty data frame
survey_data <- data.frame(Month = character(length(dates)),
For = integer(length(dates)),
Against = integer(length(dates)),
Undecided = integer(length(dates)),
stringsAsFactors = FALSE)
# Generate data for each month
for (month in 1:length(dates)) {
# Get the sentiment percentages of the previous month
if (month == 1) {
prev_month <- c(initial_for, initial_against, initial_undecided)
} else {
prev_month <- survey_data[month - 1, c("For", "Against", "Undecided")]
}
# Generate random percentage changes for each sentiment category
change_for <- sample(-10:10, 1)
change_against <- sample(-10:10, 1)
change_undecided <- -(change_for + change_against)
# Calculate the new sentiment percentages
new_for <- prev_month[1] + change_for
new_against <- prev_month[2] + change_against
new_undecided <- prev_month[3] + change_undecided
# Ensure the percentages stay within the range of 0 to 100
new_for <- pmax(pmin(new_for, 100), 0)
new_against <- pmax(pmin(new_against, 100), 0)
new_undecided <- pmax(pmin(new_undecided, 100), 0)
# Store the month and sentiment percentages in the data frame
survey_data[month, "Month"] <- format(dates[month], "%b_%Y")
survey_data[month, "For"] <- new_for
survey_data[month, "Against"] <- new_against
survey_data[month, "Undecided"] <- new_undecided
}
# Convert Month to a factor with ordered levels
survey_data$Month <- factor(survey_data$Month, levels = survey_data$Month)
# Reshape the data from wide to long format
survey_data_long <- tidyr::gather(survey_data, Sentiment, Percentage, -Month)
# Create the line plot using ggplot
ggplot(survey_data_long, aes(x = Month, y = Percentage, color = Sentiment)) +
geom_line() +
labs(x = "Month", y = "Percentage", color = "Sentiment") +
scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 8)) +
theme_minimal() +
theme(legend.position = "bottom")
View(survey_data)
# Set the seed for reproducibility
set.seed(42)
# Load the required library
library(ggplot2)
# Define the start and end dates
start_date <- as.Date("2020-01-01")
end_date <- as.Date("2022-11-01")
# Define the initial sentiment percentages
initial_for <- 50
initial_against <- 40
initial_undecided <- 10
# Create a sequence of monthly dates
dates <- seq(start_date, end_date, by = "month")
# Initialize an empty data frame
survey_data <- data.frame(Month = character(length(dates)),
For = integer(length(dates)),
Against = integer(length(dates)),
Undecided = integer(length(dates)),
stringsAsFactors = FALSE)
# Generate data for each month
for (month in 1:length(dates)) {
# Get the sentiment percentages of the previous month
if (month == 1) {
prev_month <- c(initial_for, initial_against, initial_undecided)
} else {
prev_month <- survey_data[month - 1, c("For", "Against", "Undecided")]
}
# Generate random percentage changes for each sentiment category
change_for <- sample(-10:10, 1)
change_against <- sample(-10:10, 1)
change_undecided <- -(change_for + change_against)
# Calculate the new sentiment percentages
new_for <- prev_month[1] + change_for
new_against <- prev_month[2] + change_against
new_undecided <- prev_month[3] + change_undecided
# Ensure the percentages stay within the range of 0 to 100
new_for <- pmax(pmin(new_for, 100), 0)
new_against <- pmax(pmin(new_against, 100), 0)
new_undecided <- pmax(pmin(new_undecided, 100), 0)
# Store the month and sentiment percentages in the data frame
survey_data[month, "Month"] <- format(dates[month], "%b_%Y")
survey_data[month, "For"] <- new_for
survey_data[month, "Against"] <- new_against
survey_data[month, "Undecided"] <- new_undecided
}
# Convert Month to a factor with ordered levels
survey_data$Month <- factor(survey_data$Month, levels = survey_data$Month)
# Reshape the data from wide to long format
survey_data_long <- tidyr::gather(survey_data, Sentiment, Percentage, -Month)
# Create the line plot using ggplot
ggplot(survey_data_long, aes(x = Month, y = Percentage, color = Sentiment)) +
geom_line() +
labs(x = "Month", y = "Percentage", color = "Sentiment") +
scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 8)) +
theme_minimal() +
theme(legend.position = "bottom")
View(survey_data)
View(survey_data_long)
class(survey_data_long$Percentage)
class(survey_data_long$Month)
View(survey_data_long)
class(survey_data_long$Month)
# Create the line plot using ggplot
ggplot(survey_data_long, aes(x = Month, y = Percentage, color = Sentiment, group = Sentiment)) +
geom_line() +
labs(x = "Month", y = "Percentage", color = "Sentiment") +
scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 8)) +
theme_minimal() +
theme(legend.position = "bottom")
# Create the line plot using ggplot
ggplot(survey_data_long, aes(x = Month, y = Percentage, color = Sentiment, group = Sentiment)) +
geom_line() +
labs(x = "Month", y = "Percentage", color = "Sentiment") +
scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 8)) +
theme_minimal() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Set the seed for reproducibility
set.seed(422)
# Load the required library
library(ggplot2)
# Define the start and end dates
start_date <- as.Date("2020-01-01")
end_date <- as.Date("2022-11-01")
# Define the initial sentiment percentages
initial_for <- 50
initial_against <- 40
initial_undecided <- 10
# Create a sequence of monthly dates
dates <- seq(start_date, end_date, by = "month")
# Initialize an empty data frame
survey_data <- data.frame(Month = character(length(dates)),
For = integer(length(dates)),
Against = integer(length(dates)),
Undecided = integer(length(dates)),
stringsAsFactors = FALSE)
# Generate data for each month
for (month in 1:length(dates)) {
# Get the sentiment percentages of the previous month
if (month == 1) {
prev_month <- c(initial_for, initial_against, initial_undecided)
} else {
prev_month <- survey_data[month - 1, c("For", "Against", "Undecided")]
}
# Generate random percentage changes for each sentiment category
change_for <- sample(-10:10, 1)
change_against <- sample(-10:10, 1)
change_undecided <- -(change_for + change_against)
# Calculate the new sentiment percentages
new_for <- prev_month[1] + change_for
new_against <- prev_month[2] + change_against
new_undecided <- prev_month[3] + change_undecided
# Ensure the percentages stay within the range of 0 to 100
new_for <- pmax(pmin(new_for, 100), 0)
new_against <- pmax(pmin(new_against, 100), 0)
new_undecided <- pmax(pmin(new_undecided, 100), 0)
# Store the month and sentiment percentages in the data frame
survey_data[month, "Month"] <- format(dates[month], "%b_%Y")
survey_data[month, "For"] <- new_for
survey_data[month, "Against"] <- new_against
survey_data[month, "Undecided"] <- new_undecided
}
# Convert Month to a factor with ordered levels
survey_data$Month <- factor(survey_data$Month, levels = survey_data$Month)
# Reshape the data from wide to long format
survey_data_long <- tidyr::gather(survey_data, Sentiment, Percentage, -Month)
# Create the line plot using ggplot
ggplot(survey_data_long, aes(x = Month, y = Percentage, color = Sentiment, group = Sentiment)) +
geom_line() +
labs(x = "Month", y = "Percentage", color = "Sentiment") +
scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 8)) +
theme_minimal() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
library(shiny); runApp('GitHub/code/shiny_app.R')
runApp('GitHub/code/shiny_app.R')
runApp('GitHub/code/shiny_app.R')
runApp('GitHub/code/shiny_app.R')
runApp('GitHub/code/shiny_app.R')
runApp('GitHub/code/shiny_app.R')
runApp('GitHub/code/shiny_app.R')
runApp('GitHub/code/shiny_app.R')
library(shiny); runApp('GitHub/code/shiny_app.R')
# Get global dataset to use for global trends tab
global_trends <- read.csv("vax_tweets_6.csv")
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
library(tidyverse)
library(igraph)
library(Matrix)
library(tidyverse)
library(networkD3)
library(htmlwidgets)
library(visNetwork)
library(here)
library(stringi)
library(tm)
library(EGAnet)
library(shinythemes)
library(sna)
# Get the directory of the R script
script_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set the working directory
setwd(file.path(script_dir, "../data"))
# Source the "functions.R" script
source(file.path(script_dir, "functions.R"))
# Load the categories list from the RDS file
categories <- readRDS("categories.rds")
# List all CSV files in the working directory
csv_files <- list.files(pattern = "*.csv")
# Load the CSV datasets into separate objects
for (file in csv_files) {
# Extract the month and year from the file name
month_year <- gsub("data_|.csv", "", file)
# Read the CSV file and assign it to a named object using the month-year as the name
assign(paste0("data_", month_year), read.csv(file))
}
# Get global dataset to use for global trends tab
global_trends <- read.csv("vax_tweets_6.csv")
global_trends$date = as.Date(global_trends$date)
global_trends = global_trends[,-1]
View(global_trends)
class(global_trends$dominant_topic)
global_trends$dominant_topic = as.factor(global_trends$dominant_topic)
View(global_trends)
View(global_trends)
# Create the plot
ggplot(global_trends, aes(x = date, y = dominant_topics, color = dominant_topics)) +
geom_line() +
scale_color_manual(values = c("red", "blue", "green", "purple")) +
labs(title = "Dominant Topics Over Time",
x = "Date",
y = "Dominant Topics") +
theme(legend.position = "right",
plot.background = element_rect(fill = "white"))
View(global_trends)
# Create the plot
ggplot(global_trends, aes(x = date, y = dominant_topic, color = dominant_topic)) +
geom_line() +
scale_color_manual(values = c("red", "blue", "green", "purple")) +
labs(title = "Topics Over Time",
x = "Date",
y = "Topic") +
theme(legend.position = "right",
plot.background = element_rect(fill = "white"))
# Create the plot
ggplot(global_trends, aes(x = date, y = dominant_topic, color = dominant_topic)) +
geom_line() +
scale_color_manual(values = c("red", "blue", "green", "purple")) +
labs(title = "Topics Over Time",
x = "Date",
y = "Topic") +
theme(legend.position = "right",
plot.background = element_rect(fill = "white"))
# Create the plot
ggplot(global_trends, aes(x = date, y = dominant_topic, color = dominant_topic)) +
geom_line() +
scale_color_manual(values = hue_pal()(nlevels(global_trends$dominant_topic))) +
labs(title = "Topics Over Time",
x = "Date",
y = "Topic") +
theme(legend.position = "right",
plot.background = element_rect(fill = "white"))
library(RColorBrewer)
# Create the plot
ggplot(global_trends, aes(x = date, y = dominant_topic, color = dominant_topic)) +
geom_line() +
scale_color_manual(values = brewer.pal(nlevels(global_trends$dominant_topic), "Set1")) +
labs(title = "Topics Over Time",
x = "Date",
y = "Topic") +
theme(legend.position = "right",
plot.background = element_rect(fill = "white"))
# Convert the date variable to a Date object (if not already done)
global_trends$date <- as.Date(global_trends$date)
# Create a new variable for the month and year
global_trends$month_year <- format(global_trends$date, "%Y-%m")
View(global_trends)
# Create a summary data frame with the count of each topic for each month
topic_counts <- aggregate(dominant_topic ~ month_year + dominant_topic, data = global_trends, FUN = length)
# Plotting
ggplot(topic_counts, aes(x = month_year, y = dominant_topic, fill = dominant_topic)) +
geom_bar(stat = "identity") +
labs(x = "Month", y = "Count", title = "Monthly Count of Dominant Topics") +
scale_fill_manual(values = c("Topic A" = "red", "Topic B" = "blue", "Topic C" = "green")) +
theme_minimal() +
theme(legend.title = element_blank())
# Create a summary data frame with the count of each topic for each month
topic_counts <- aggregate(dominant_topic ~ month_year + dominant_topic, data = global_trends, FUN = length)
# Generate a color palette with 11 distinct colors
my_colors <- rainbow(length(unique(topic_counts$dominant_topic)))
# Plotting
ggplot(topic_counts, aes(x = month_year, y = dominant_topic, fill = dominant_topic)) +
geom_bar(stat = "identity") +
labs(x = "Month", y = "Count", title = "Monthly Count of Dominant Topics") +
scale_fill_manual(values = my_colors) +
theme_minimal() +
theme(legend.title = element_blank())
# Create a new variable for the month and year
global_trends$month_year <- format(global_trends$date, "%Y-%m")
# Create a summary data frame with the count of each topic for each month
topic_counts <- aggregate(dominant_topic ~ month_year + dominant_topic, data = global_trends, FUN = length)
# Convert dominant_topic to a factor
topic_counts$dominant_topic <- as.factor(topic_counts$dominant_topic)
# Generate a color palette with 11 distinct colors
my_colors <- rainbow(length(unique(topic_counts$dominant_topic)))
# Plotting
ggplot(topic_counts, aes(x = month_year, fill = dominant_topic)) +
geom_bar() +
labs(x = "Month", y = "Count", title = "Monthly Count of Dominant Topics") +
scale_fill_manual(values = my_colors, labels = levels(topic_counts$dominant_topic)) +
theme_minimal() +
theme(legend.title = element_blank())
View(topic_counts)
View(topic_counts)
# Create a new variable for the month and year
global_trends$month_year <- format(global_trends$date, "%Y-%m")
# Count the occurrences of each factor level in dominant_topic for each month
topic_counts <- global_trends %>%
group_by(month_year, dominant_topic) %>%
count() %>%
ungroup()
View(topic_counts)
# Generate a color palette with 11 distinct colors
my_colors <- rainbow(length(unique(topic_counts$dominant_topic)))
# Plotting
ggplot(topic_counts, aes(x = month_year, y = n, fill = dominant_topic)) +
geom_bar(stat = "identity") +
labs(x = "Month", y = "Count", title = "Monthly Count of Dominant Topics") +
scale_fill_manual(values = my_colors, labels = levels(topic_counts$dominant_topic)) +
theme_minimal() +
theme(legend.title = element_blank())
# Plotting
ggplot(topic_counts, aes(x = month_year, y = n, fill = dominant_topic)) +
geom_bar(stat = "identity") +
labs(x = "Month", y = "Count", title = "Monthly Count of Dominant Topics") +
scale_fill_manual(values = my_colors, labels = levels(topic_counts$dominant_topic)) +
theme_minimal() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
# Plotting
ggplot(topic_counts, aes(x = month_year, y = n, fill = dominant_topic)) +
geom_bar(stat = "identity") +
labs(x = "Month", y = "Count", title = "Monthly Count of Dominant Topics") +
scale_fill_manual(values = my_colors, labels = levels(topic_counts$dominant_topic)) +
theme_minimal() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1))
runApp('~/GitHub/code/shiny_app.R')
runApp('~/GitHub/code/shiny_app.R')
runApp('~/GitHub/code/shiny_app.R')
