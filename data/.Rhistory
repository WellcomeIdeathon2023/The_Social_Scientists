change_against <- sample(-10:10, 1)
change_undecided <- -(change_for + change_against)
# Calculate the new sentiment percentages
new_for <- prev_month["For"] + change_for
new_against <- prev_month["Against"] + change_against
new_undecided <- prev_month["Undecided"] + change_undecided
# Ensure the percentages stay within the range of 0 to 100
new_for <- pmax(pmin(new_for, 100), 0)
new_against <- pmax(pmin(new_against, 100), 0)
new_undecided <- pmax(pmin(new_undecided, 100), 0)
# Calculate the current month
current_month <- format(start_date %m+% months(month - 1), "%b_%Y")
# Store the month and sentiment percentages in the data frame
survey_data[month, "Month"] <- current_month
survey_data[month, "For"] <- new_for
survey_data[month, "Against"] <- new_against
survey_data[month, "Undecided"] <- new_undecided
}
# Display the resulting survey data
survey_data
View(survey_data)
class(survey_data$Month)
# Set the seed for reproducibility
set.seed(42)
# Define the start and end dates
start_date <- as.Date("2020-01-01")
end_date <- as.Date("2022-11-01")
# Define the initial sentiment percentages
initial_for <- 50
initial_against <- 40
initial_undecided <- 10
# Create a sequence of monthly dates
dates <- seq(start_date, end_date, by = "month")
# Initialize an empty data frame
survey_data <- data.frame(Month = character(length(dates)),
For = numeric(length(dates)),
Against = numeric(length(dates)),
Undecided = numeric(length(dates)))
# Set the initial sentiment percentages
survey_data[1, c("For", "Against", "Undecided")] <- c(initial_for, initial_against, initial_undecided)
# Generate data for each month
for (month in 2:length(dates)) {
# Get the sentiment percentages of the previous month
prev_month <- survey_data[month - 1, c("For", "Against", "Undecided")]
# Generate random percentage changes for each sentiment category
change_for <- sample(-10:10, 1)
change_against <- sample(-10:10, 1)
change_undecided <- -(change_for + change_against)
# Calculate the new sentiment percentages
new_for <- prev_month["For"] + change_for
new_against <- prev_month["Against"] + change_against
new_undecided <- prev_month["Undecided"] + change_undecided
# Ensure the percentages stay within the range of 0 to 100
new_for <- pmax(pmin(new_for, 100), 0)
new_against <- pmax(pmin(new_against, 100), 0)
new_undecided <- pmax(pmin(new_undecided, 100), 0)
# Store the month and sentiment percentages in the data frame
survey_data[month, "Month"] <- format(dates[month], "%b_%Y")
survey_data[month, "For"] <- new_for
survey_data[month, "Against"] <- new_against
survey_data[month, "Undecided"] <- new_undecided
}
# Display the resulting survey data
survey_data
View(survey_data)
# Set the seed for reproducibility
set.seed(42)
# Define the start and end dates
start_date <- as.Date("2020-01-01")
end_date <- as.Date("2022-11-01")
# Define the initial sentiment percentages
initial_for <- 50
initial_against <- 40
initial_undecided <- 10
# Create a sequence of monthly dates
dates <- seq(start_date, end_date, by = "month")
# Initialize an empty data frame
survey_data <- data.frame(Month = character(length(dates)),
For = numeric(length(dates)),
Against = numeric(length(dates)),
Undecided = numeric(length(dates)))
# Set the initial sentiment percentages for January 2020
survey_data[1, c("Month", "For", "Against", "Undecided")] <- c(format(start_date, "%b_%Y"),
initial_for, initial_against, initial_undecided)
# Generate data for each month starting from February 2020
for (month in 2:length(dates)) {
# Get the sentiment percentages of the previous month
prev_month <- survey_data[month - 1, c("For", "Against", "Undecided")]
# Generate random percentage changes for each sentiment category
change_for <- sample(-10:10, 1)
change_against <- sample(-10:10, 1)
change_undecided <- -(change_for + change_against)
# Calculate the new sentiment percentages
new_for <- prev_month["For"] + change_for
new_against <- prev_month["Against"] + change_against
new_undecided <- prev_month["Undecided"] + change_undecided
# Ensure the percentages stay within the range of 0 to 100
new_for <- pmax(pmin(new_for, 100), 0)
new_against <- pmax(pmin(new_against, 100), 0)
new_undecided <- pmax(pmin(new_undecided, 100), 0)
# Store the month and sentiment percentages in the data frame
survey_data[month, "Month"] <- format(dates[month], "%b_%Y")
survey_data[month, "For"] <- new_for
survey_data[month, "Against"] <- new_against
survey_data[month, "Undecided"] <- new_undecided
}
# Display the resulting survey data
survey_data
View(survey_data)
# Set the seed for reproducibility
set.seed(42)
# Define the start and end dates
start_date <- as.Date("2020-01-01")
end_date <- as.Date("2022-11-01")
# Define the initial sentiment percentages
initial_for <- 50
initial_against <- 40
initial_undecided <- 10
# Create a sequence of monthly dates
dates <- seq(start_date, end_date, by = "month")
# Initialize an empty data frame
survey_data <- data.frame(Month = character(length(dates)),
For = numeric(length(dates)),
Against = numeric(length(dates)),
Undecided = numeric(length(dates)))
# Generate data for each month
for (month in 1:length(dates)) {
# Get the sentiment percentages of the previous month
if (month == 1) {
prev_month <- c(initial_for, initial_against, initial_undecided)
} else {
prev_month <- survey_data[month - 1, c("For", "Against", "Undecided")]
}
# Generate random percentage changes for each sentiment category
change_for <- sample(-10:10, 1)
change_against <- sample(-10:10, 1)
change_undecided <- -(change_for + change_against)
# Calculate the new sentiment percentages
new_for <- prev_month["For"] + change_for
new_against <- prev_month["Against"] + change_against
new_undecided <- prev_month["Undecided"] + change_undecided
# Ensure the percentages stay within the range of 0 to 100
new_for <- pmax(pmin(new_for, 100), 0)
new_against <- pmax(pmin(new_against, 100), 0)
new_undecided <- pmax(pmin(new_undecided, 100), 0)
# Store the month and sentiment percentages in the data frame
survey_data[month, "Month"] <- format(dates[month], "%b_%Y")
survey_data[month, "For"] <- new_for
survey_data[month, "Against"] <- new_against
survey_data[month, "Undecided"] <- new_undecided
}
# Display the resulting survey data
survey_data
View(survey_data)
# Set the seed for reproducibility
set.seed(42)
# Define the start and end dates
start_date <- as.Date("2020-01-01")
end_date <- as.Date("2022-11-01")
# Define the initial sentiment percentages
initial_for <- 50
initial_against <- 40
initial_undecided <- 10
# Create a sequence of monthly dates
dates <- seq(start_date, end_date, by = "month")
# Initialize an empty data frame
survey_data <- data.frame(Month = character(length(dates)),
For = numeric(length(dates)),
Against = numeric(length(dates)),
Undecided = numeric(length(dates)))
# Generate data for each month
for (month in 1:length(dates)) {
# Get the sentiment percentages of the previous month
if (month == 1) {
prev_month <- c(initial_for, initial_against, initial_undecided)
} else {
prev_month <- survey_data[month - 1, c("For", "Against", "Undecided")]
}
# Generate random percentage changes for each sentiment category
change_for <- sample(-10:10, 1)
change_against <- sample(-10:10, 1)
change_undecided <- -(change_for + change_against)
# Calculate the new sentiment percentages
new_for <- prev_month["For"] + change_for
new_against <- prev_month["Against"] + change_against
new_undecided <- prev_month["Undecided"] + change_undecided
# Ensure the percentages stay within the range of 0 to 100
new_for <- pmax(pmin(new_for, 100), 0)
new_against <- pmax(pmin(new_against, 100), 0)
new_undecided <- pmax(pmin(new_undecided, 100), 0)
# Store the month and sentiment percentages in the data frame
survey_data[month, "Month"] <- format(dates[month], "%b_%Y")
survey_data[month, "For"] <- new_for
survey_data[month, "Against"] <- new_against
survey_data[month, "Undecided"] <- new_undecided
}
# Display the resulting survey data
survey_data
View(survey_data)
# Set the seed for reproducibility
set.seed(42)
# Define the start and end dates
start_date <- as.Date("2020-01-01")
end_date <- as.Date("2022-11-01")
# Define the initial sentiment percentages
initial_for <- 50
initial_against <- 40
initial_undecided <- 10
# Create a sequence of monthly dates
dates <- seq(start_date, end_date, by = "month")
# Initialize an empty data frame
survey_data <- data.frame(Month = character(length(dates)),
For = integer(length(dates)),
Against = integer(length(dates)),
Undecided = integer(length(dates)),
stringsAsFactors = FALSE)
# Generate data for each month
for (month in 1:length(dates)) {
# Get the sentiment percentages of the previous month
if (month == 1) {
prev_month <- c(initial_for, initial_against, initial_undecided)
} else {
prev_month <- survey_data[month - 1, c("For", "Against", "Undecided")]
}
# Generate random percentage changes for each sentiment category
change_for <- sample(-10:10, 1)
change_against <- sample(-10:10, 1)
change_undecided <- -(change_for + change_against)
# Calculate the new sentiment percentages
new_for <- prev_month[1] + change_for
new_against <- prev_month[2] + change_against
new_undecided <- prev_month[3] + change_undecided
# Ensure the percentages stay within the range of 0 to 100
new_for <- pmax(pmin(new_for, 100), 0)
new_against <- pmax(pmin(new_against, 100), 0)
new_undecided <- pmax(pmin(new_undecided, 100), 0)
# Store the month and sentiment percentages in the data frame
survey_data[month, "Month"] <- format(dates[month], "%b_%Y")
survey_data[month, "For"] <- new_for
survey_data[month, "Against"] <- new_against
survey_data[month, "Undecided"] <- new_undecided
}
# Display the resulting survey data
survey_data
View(survey_data)
# Set the seed for reproducibility
set.seed(42)
# Load the required library
library(ggplot2)
# Define the start and end dates
start_date <- as.Date("2020-01-01")
end_date <- as.Date("2022-11-01")
# Define the initial sentiment percentages
initial_for <- 50
initial_against <- 40
initial_undecided <- 10
# Create a sequence of monthly dates
dates <- seq(start_date, end_date, by = "month")
# Initialize an empty data frame
survey_data <- data.frame(Month = character(length(dates)),
For = integer(length(dates)),
Against = integer(length(dates)),
Undecided = integer(length(dates)),
stringsAsFactors = FALSE)
# Generate data for each month
for (month in 1:length(dates)) {
# Get the sentiment percentages of the previous month
if (month == 1) {
prev_month <- c(initial_for, initial_against, initial_undecided)
} else {
prev_month <- survey_data[month - 1, c("For", "Against", "Undecided")]
}
# Generate random percentage changes for each sentiment category
change_for <- sample(-10:10, 1)
change_against <- sample(-10:10, 1)
change_undecided <- -(change_for + change_against)
# Calculate the new sentiment percentages
new_for <- prev_month[1] + change_for
new_against <- prev_month[2] + change_against
new_undecided <- prev_month[3] + change_undecided
# Ensure the percentages stay within the range of 0 to 100
new_for <- pmax(pmin(new_for, 100), 0)
new_against <- pmax(pmin(new_against, 100), 0)
new_undecided <- pmax(pmin(new_undecided, 100), 0)
# Store the month and sentiment percentages in the data frame
survey_data[month, "Month"] <- format(dates[month], "%b_%Y")
survey_data[month, "For"] <- new_for
survey_data[month, "Against"] <- new_against
survey_data[month, "Undecided"] <- new_undecided
}
# Convert Month to a factor with ordered levels
survey_data$Month <- factor(survey_data$Month, levels = survey_data$Month)
# Reshape the data from wide to long format
survey_data_long <- tidyr::gather(survey_data, Sentiment, Percentage, -Month)
# Create the line plot using ggplot
ggplot(survey_data_long, aes(x = Month, y = Percentage, color = Sentiment)) +
geom_line() +
labs(x = "Month", y = "Percentage", color = "Sentiment") +
scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 8)) +
theme_minimal() +
theme(legend.position = "bottom")
View(survey_data)
# Set the seed for reproducibility
set.seed(42)
# Load the required library
library(ggplot2)
# Define the start and end dates
start_date <- as.Date("2020-01-01")
end_date <- as.Date("2022-11-01")
# Define the initial sentiment percentages
initial_for <- 50
initial_against <- 40
initial_undecided <- 10
# Create a sequence of monthly dates
dates <- seq(start_date, end_date, by = "month")
# Initialize an empty data frame
survey_data <- data.frame(Month = character(length(dates)),
For = integer(length(dates)),
Against = integer(length(dates)),
Undecided = integer(length(dates)),
stringsAsFactors = FALSE)
# Generate data for each month
for (month in 1:length(dates)) {
# Get the sentiment percentages of the previous month
if (month == 1) {
prev_month <- c(initial_for, initial_against, initial_undecided)
} else {
prev_month <- survey_data[month - 1, c("For", "Against", "Undecided")]
}
# Generate random percentage changes for each sentiment category
change_for <- sample(-10:10, 1)
change_against <- sample(-10:10, 1)
change_undecided <- -(change_for + change_against)
# Calculate the new sentiment percentages
new_for <- prev_month[1] + change_for
new_against <- prev_month[2] + change_against
new_undecided <- prev_month[3] + change_undecided
# Ensure the percentages stay within the range of 0 to 100
new_for <- pmax(pmin(new_for, 100), 0)
new_against <- pmax(pmin(new_against, 100), 0)
new_undecided <- pmax(pmin(new_undecided, 100), 0)
# Store the month and sentiment percentages in the data frame
survey_data[month, "Month"] <- format(dates[month], "%b_%Y")
survey_data[month, "For"] <- new_for
survey_data[month, "Against"] <- new_against
survey_data[month, "Undecided"] <- new_undecided
}
# Convert Month to a factor with ordered levels
survey_data$Month <- factor(survey_data$Month, levels = survey_data$Month)
# Reshape the data from wide to long format
survey_data_long <- tidyr::gather(survey_data, Sentiment, Percentage, -Month)
# Create the line plot using ggplot
ggplot(survey_data_long, aes(x = Month, y = Percentage, color = Sentiment)) +
geom_line() +
labs(x = "Month", y = "Percentage", color = "Sentiment") +
scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 8)) +
theme_minimal() +
theme(legend.position = "bottom")
View(survey_data)
View(survey_data_long)
class(survey_data_long$Percentage)
class(survey_data_long$Month)
View(survey_data_long)
class(survey_data_long$Month)
# Create the line plot using ggplot
ggplot(survey_data_long, aes(x = Month, y = Percentage, color = Sentiment, group = Sentiment)) +
geom_line() +
labs(x = "Month", y = "Percentage", color = "Sentiment") +
scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 8)) +
theme_minimal() +
theme(legend.position = "bottom")
# Create the line plot using ggplot
ggplot(survey_data_long, aes(x = Month, y = Percentage, color = Sentiment, group = Sentiment)) +
geom_line() +
labs(x = "Month", y = "Percentage", color = "Sentiment") +
scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 8)) +
theme_minimal() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Set the seed for reproducibility
set.seed(422)
# Load the required library
library(ggplot2)
# Define the start and end dates
start_date <- as.Date("2020-01-01")
end_date <- as.Date("2022-11-01")
# Define the initial sentiment percentages
initial_for <- 50
initial_against <- 40
initial_undecided <- 10
# Create a sequence of monthly dates
dates <- seq(start_date, end_date, by = "month")
# Initialize an empty data frame
survey_data <- data.frame(Month = character(length(dates)),
For = integer(length(dates)),
Against = integer(length(dates)),
Undecided = integer(length(dates)),
stringsAsFactors = FALSE)
# Generate data for each month
for (month in 1:length(dates)) {
# Get the sentiment percentages of the previous month
if (month == 1) {
prev_month <- c(initial_for, initial_against, initial_undecided)
} else {
prev_month <- survey_data[month - 1, c("For", "Against", "Undecided")]
}
# Generate random percentage changes for each sentiment category
change_for <- sample(-10:10, 1)
change_against <- sample(-10:10, 1)
change_undecided <- -(change_for + change_against)
# Calculate the new sentiment percentages
new_for <- prev_month[1] + change_for
new_against <- prev_month[2] + change_against
new_undecided <- prev_month[3] + change_undecided
# Ensure the percentages stay within the range of 0 to 100
new_for <- pmax(pmin(new_for, 100), 0)
new_against <- pmax(pmin(new_against, 100), 0)
new_undecided <- pmax(pmin(new_undecided, 100), 0)
# Store the month and sentiment percentages in the data frame
survey_data[month, "Month"] <- format(dates[month], "%b_%Y")
survey_data[month, "For"] <- new_for
survey_data[month, "Against"] <- new_against
survey_data[month, "Undecided"] <- new_undecided
}
# Convert Month to a factor with ordered levels
survey_data$Month <- factor(survey_data$Month, levels = survey_data$Month)
# Reshape the data from wide to long format
survey_data_long <- tidyr::gather(survey_data, Sentiment, Percentage, -Month)
# Create the line plot using ggplot
ggplot(survey_data_long, aes(x = Month, y = Percentage, color = Sentiment, group = Sentiment)) +
geom_line() +
labs(x = "Month", y = "Percentage", color = "Sentiment") +
scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 8)) +
theme_minimal() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
data = read.csv("vax_tweets_6.csv")
data = as.data.frame(cbind(data$X.1, data$text))
data$X.1 = data$X
numbers = read.csv("numbers.csv")
numbers$X = numbers$x
# Iterate through numbers in numbers$X
response <- vector(mode = "character", length = nrow(numbers))  # Initialize response vector
class(data$text)
setwd("C:/Users/s1723280/Documents/GitHub/data")
data = read.csv("vax_tweets_6.csv")
data = as.data.frame(cbind(data$X.1, data$text))
data$X.1 = data$X
numbers = read.csv("numbers.csv")
numbers$X = numbers$x
# Iterate through numbers in numbers$X
response <- vector(mode = "character", length = nrow(numbers))  # Initialize response vector
class(data$text)
View(data)
View(data)
class(data$V1)
colnames(data) = c("X", "text")
View(data)
data = read.csv("vax_tweets_6.csv")
data = as.data.frame(cbind(data$X.1, data$text))
colnames(data) = c("X", "text")
data$X = as.numeric(data$X)
numbers = read.csv("numbers.csv")
numbers$X = numbers$x
# Iterate through numbers in numbers$X
response <- vector(mode = "character", length = nrow(numbers))  # Initialize response vector
View(data)
View(numbers)
# Iterate through numbers in numbers$X
response <- vector(mode = "character", length = nrow(numbers))  # Initialize response vector
for (i in 1:nrow(numbers)) {
x <- numbers$X[i]
# Find the corresponding text from data$text
text <- data$text[data$X == x]
# Display the text and prompt for user input
cat("Text:", text, "\n")
response[i] <- readline(prompt = "Type your response: ")
}
data = read.csv("vax_tweets_6.csv")
data = as.data.frame(cbind(data$X.1, data$text))
colnames(data) = c("X", "text")
data$X = as.numeric(data$X)
numbers = read.csv("numbers.csv")
numbers$X = numbers$x
# Iterate through numbers in numbers$X
response <- vector(mode = "character", length = nrow(numbers))  # Initialize response vector
for (i in 1:nrow(numbers)) {
x <- numbers$X[i]
# Find the corresponding text from data$text
text <- data$text[data$X == x]
# Display the text and prompt for user input
cat("X =", x, "\n")
cat("Text:", text, "\n")
response[i] <- readline(prompt = "Type your response: ")
}
data = read.csv("vax_tweets_6.csv")
data = as.data.frame(cbind(data$X.1, data$text))
colnames(data) = c("X", "text")
data$X = as.numeric(data$X)
numbers = read.csv("numbers.csv")
numbers$X = numbers$x
# Iterate through numbers in numbers$X
response <- vector(mode = "character", length = nrow(numbers))  # Initialize response vector
for (i in 1:nrow(numbers)) {
x <- numbers$X[i]
# Find the corresponding text from data$text
text <- data$text[data$X == x]
# Display the text and prompt for user input
cat("X =", x, "\n")
cat("Text:", text, "\n")
response[i] <- readline(prompt = "Type your response: ")
}
