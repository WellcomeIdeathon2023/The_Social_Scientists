selected_data <- selected_data[selected_data$Organizations > 0, ]
}
# Check if "Locations" checkbox is checked
if (input$locations_checkbox) {
selected_data <- selected_data[selected_data$Locations > 0, ]
}
# Check if "Symptoms" checkbox is checked
if (input$symptoms_checkbox) {
selected_data <- selected_data[selected_data$Symptoms > 0, ]
}
# Check if "COVID" checkbox is checked
if (input$covid_checkbox) {
selected_data <- selected_data[selected_data$COVID > 0, ]
}
# Check if "Vaccination" checkbox is checked
if (input$vaccination_checkbox) {
selected_data <- selected_data[selected_data$Vaccination > 0, ]
}
# Check if "Politics" checkbox is checked
if (input$politics_checkbox) {
selected_data <- selected_data[selected_data$Politics > 0, ]
}
# Check if "Conspiracy" checkbox is checked
if (input$conspiracy_checkbox) {
selected_data <- selected_data[selected_data$Conspiracy > 0, ]
}
# Check if "Slurs" checkbox is checked
if (input$slurs_checkbox) {
selected_data <- selected_data[selected_data$Slurs > 0, ]
}
# Check if "Masks" checkbox is checked
if (input$masks_checkbox) {
selected_data <- selected_data[selected_data$Masks > 0, ]
}
# Check if "Origin" checkbox is checked
if (input$origin_checkbox) {
selected_data <- selected_data[selected_data$origin > 0, ]
}
# Check if "Vaccine Conspiracy" checkbox is checked
if (input$vaccine_conspiracy_checkbox) {
selected_data <- selected_data[selected_data$vaccine_conspiracy > 0, ]
}
# Check if "Government" checkbox is checked
if (input$government_checkbox) {
selected_data <- selected_data[selected_data$government > 0, ]
}
# Check if "Pharma" checkbox is checked
if (input$pharma_checkbox) {
selected_data <- selected_data[selected_data$pharma > 0, ]
}
# Check if "Five_G" checkbox is checked
if (input$five_g_checkbox) {
selected_data <- selected_data[selected_data$Five_G > 0, ]
}
# Check if "Gates" checkbox is checked
if (input$gates_checkbox) {
selected_data <- selected_data[selected_data$gates > 0, ]
}
# Check if "NWO" checkbox is checked
if (input$nwo_checkbox) {
selected_data <- selected_data[selected_data$nwo > 0, ]
}
# Check if "Media" checkbox is checked
if (input$media_checkbox) {
selected_data <- selected_data[selected_data$media > 0, ]
}
misinfo_graph <- misinformation_month(selected_data)
misinfo_graph
})
output$sentiment_plot <- renderPlot({
# Load the necessary data (replace with your own data loading code)
selected_date <- parse_date_time(input$selected_month, "b-y")
file_name <- paste0("data_", format(selected_date, format = "%b_%Y"))
data <- get(file_name)
# Compute the sums every five days
fiveday_sums <- compute_sums_every_one_day(data)
# Label high periods
fiveday_sums <- label_high_periods(fiveday_sums)
# Create a new data frame for high_neg == TRUE
high_neg_dates <- fiveday_sums %>%
filter(high_neg == TRUE) %>%
select(date_interval)
# Plot the sentiment over time
ggplot(fiveday_sums, aes(x = date_interval)) +
geom_line(aes(y = normalized_pos), color = 'blue') +
geom_line(aes(y = normalized_neg), color = 'red') +
geom_vline(
data = high_neg_dates,
aes(xintercept = as.numeric(date_interval)),
linetype = "dashed",
color = "black",
size = 0.5
) +
labs(
title = "Normalized Sentiment Over Time",
x = "Date Interval",
y = "Normalized Sentiment Score",
color = "Legend"
) +
scale_color_manual(
values = c("blue", "red"),
labels = c("Positive", "Negative")
) +
theme_minimal()
})
output$hashtags_by_category <- renderPlot({
selected_date <- parse_date_time(input$selected_month, "b-y")
file_name <- paste0("data_", format(selected_date, format = "%b_%Y"))
data <- get(file_name)
# Check if "Organisations" checkbox is checked
if (input$organisations_checkbox) {
data <- data[data$Organizations > 0, ]
}
# Check if "Locations" checkbox is checked
if (input$locations_checkbox) {
data <- data[data$Locations > 0, ]
}
# Check if "Symptoms" checkbox is checked
if (input$symptoms_checkbox) {
data <- data[data$Symptoms > 0, ]
}
# Check if "COVID" checkbox is checked
if (input$covid_checkbox) {
data <- data[data$COVID > 0, ]
}
# Check if "Vaccination" checkbox is checked
if (input$vaccination_checkbox) {
data <- data[data$Vaccination > 0, ]
}
# Check if "Politics" checkbox is checked
if (input$politics_checkbox) {
data <- data[data$Politics > 0, ]
}
# Check if "Conspiracy" checkbox is checked
if (input$conspiracy_checkbox) {
data <- data[data$Conspiracy > 0, ]
}
# Check if "Slurs" checkbox is checked
if (input$slurs_checkbox) {
data <- data[data$Slurs > 0, ]
}
# Check if "Masks" checkbox is checked
if (input$masks_checkbox) {
data <- data[data$Masks > 0, ]
}
# Check if "Origin" checkbox is checked
if (input$origin_checkbox) {
data <- data[data$origin > 0, ]
}
# Check if "Vaccine Conspiracy" checkbox is checked
if (input$vaccine_conspiracy_checkbox) {
data <- data[data$vaccine_conspiracy > 0, ]
}
# Check if "Government" checkbox is checked
if (input$government_checkbox) {
data <- data[data$government > 0, ]
}
# Check if "Pharma" checkbox is checked
if (input$pharma_checkbox) {
data <- data[data$pharma > 0, ]
}
# Check if "Five_G" checkbox is checked
if (input$five_g_checkbox) {
data <- data[data$Five_G > 0, ]
}
# Check if "Gates" checkbox is checked
if (input$gates_checkbox) {
data <- data[data$gates > 0, ]
}
# Check if "NWO" checkbox is checked
if (input$nwo_checkbox) {
data <- data[data$nwo > 0, ]
}
# Check if "Media" checkbox is checked
if (input$media_checkbox) {
data <- data[data$media > 0, ]
}
all_hashtags <- unlist(str_extract_all(data$hashtags, "\\w+"))
# Find the two most common hashtags
top_hashtags <- head(sort(table(all_hashtags), decreasing = TRUE), 10)
most_common_hashtags <- names(top_hashtags)
# Create new variables for the most common hashtags
for (hashtag in most_common_hashtags) {
hashtag_column <- paste0("hashtag_", hashtag)  # Add prefix "hashtag_" to the column name
data[[hashtag_column]] <- ifelse(grepl(hashtag, data$hashtags), 1, 0)
}
library(ggplot2)
hashtag_columns <- data[, grepl("^hashtag_", colnames(data))]
hashtag_counts <- colSums(hashtag_columns)
# Sort the hashtags by count in descending order
sorted_hashtags <- sort(hashtag_counts, decreasing = TRUE)
# Remove the "hashtag_" prefix from the names
hashtag_names <- sub("^hashtag_", "", names(sorted_hashtags))
# Create a data frame for plotting
plot_data <- data.frame(Hashtags = hashtag_names, Counts = sorted_hashtags)
# Create the bar plot using ggplot2
ggplot(plot_data, aes(x = reorder(Hashtags, -Counts), y = Counts)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Hashtags", y = "Counts", title = "Counts of Hashtags") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$co_occurrence_plot <- renderImage({
# Construct the file path for the image
selected_date <- parse_date_time(input$selected_month, "b-y")
image_file <- paste0(format(selected_date, format = "%b_%Y"), ".png")
image_path <- file.path(getwd(), image_file)
# Return a list with the src and alt attributes
list(src = image_path, alt = "Co-occurrence Plot", class = "custom-image")
}, deleteFile = FALSE)
output$misinformation = renderPlot({
# Filter data based on selected month
selected_data <- global_trends
# Check if "Organisations" checkbox is checked
if (input$organisations_checkbox) {
selected_data <- selected_data[selected_data$Organizations > 0, ]
}
# Check if "Locations" checkbox is checked
if (input$locations_checkbox) {
selected_data <- selected_data[selected_data$Locations > 0, ]
}
# Check if "Symptoms" checkbox is checked
if (input$symptoms_checkbox) {
selected_data <- selected_data[selected_data$Symptoms > 0, ]
}
# Check if "COVID" checkbox is checked
if (input$covid_checkbox) {
selected_data <- selected_data[selected_data$COVID > 0, ]
}
# Check if "Vaccination" checkbox is checked
if (input$vaccination_checkbox) {
selected_data <- selected_data[selected_data$Vaccination > 0, ]
}
# Check if "Politics" checkbox is checked
if (input$politics_checkbox) {
selected_data <- selected_data[selected_data$Politics > 0, ]
}
# Check if "Conspiracy" checkbox is checked
if (input$conspiracy_checkbox) {
selected_data <- selected_data[selected_data$Conspiracy > 0, ]
}
# Check if "Slurs" checkbox is checked
if (input$slurs_checkbox) {
selected_data <- selected_data[selected_data$Slurs > 0, ]
}
# Check if "Masks" checkbox is checked
if (input$masks_checkbox) {
selected_data <- selected_data[selected_data$Masks > 0, ]
}
# Check if "Origin" checkbox is checked
if (input$origin_checkbox) {
selected_data <- selected_data[selected_data$origin > 0, ]
}
# Check if "Vaccine Conspiracy" checkbox is checked
if (input$vaccine_conspiracy_checkbox) {
selected_data <- selected_data[selected_data$vaccine_conspiracy > 0, ]
}
# Check if "Government" checkbox is checked
if (input$government_checkbox) {
selected_data <- selected_data[selected_data$government > 0, ]
}
# Check if "Pharma" checkbox is checked
if (input$pharma_checkbox) {
selected_data <- selected_data[selected_data$pharma > 0, ]
}
# Check if "Five_G" checkbox is checked
if (input$five_g_checkbox) {
selected_data <- selected_data[selected_data$Five_G > 0, ]
}
# Check if "Gates" checkbox is checked
if (input$gates_checkbox) {
selected_data <- selected_data[selected_data$gates > 0, ]
}
# Check if "NWO" checkbox is checked
if (input$nwo_checkbox) {
selected_data <- selected_data[selected_data$nwo > 0, ]
}
# Check if "Media" checkbox is checked
if (input$media_checkbox) {
selected_data <- selected_data[selected_data$media > 0, ]
}
misinfo_graph <- misinformation(selected_data)
misinfo_graph
})
output$negative_hashtags_table <- renderTable({
# Load the necessary data (replace with your own data loading code)
selected_date <- parse_date_time(input$selected_month, "b-y")
file_name <- paste0("data_", format(selected_date, format = "%b_%Y"))
data <- get(file_name)
# Get the most common hashtags associated with negative sentiment
timeframe_start <- "2020-01-01"
timeframe_end <- "2020-06-30"
get_negative_hashtags(data, timeframe_start, timeframe_end)
})
output$correlated_negative_hashtags_table <- renderTable({
# Load the necessary data (replace with your own data loading code)
selected_date <- parse_date_time(input$selected_month, "b-y")
file_name <- paste0("data_", format(selected_date, format = "%b_%Y"))
data <- get(file_name)
# Get hashtags with the highest negative correlation
timeframe_start <- "2020-01-01"
timeframe_end <- "2020-06-30"
get_correlated_negative_hashtags(data, timeframe_start, timeframe_end)
})
output$alltime_trends <- renderPlot({
# Load the necessary data (replace with your own data loading code)
data <- global_trends
# Compute the sums every five days
fiveday_sums <- compute_sums_every_thirty_days(data)
# Label high periods
fiveday_sums <- label_high_periods(fiveday_sums)
# Create a new data frame for high_neg == TRUE
high_neg_dates <- fiveday_sums %>%
filter(high_neg == TRUE) %>%
select(date_interval,normalized_neg,sum_favourites_neg)
# Plot the sentiment over time
ggplot(fiveday_sums, aes(x = date_interval)) +
geom_line(aes(y = normalized_pos), color = 'blue') +
geom_line(aes(y = normalized_neg), color = 'red') +
geom_point(
data = high_neg_dates,
aes(x = date_interval, y = normalized_neg),
color = "black",
size = 3
) +
geom_text(
data = high_neg_dates,
aes(x = date_interval, y = normalized_neg),
label = "Negative Peak",
vjust = -1,
hjust = 0.2,
size = 3,
color = "black"
) +
labs(
title = "Normalized Sentiment Over Time",
x = "Date Interval",
y = "Normalized Sentiment Score",
color = "Legend"
) +
scale_x_date(date_breaks = "3 months", date_labels = "%,b %Y") +
scale_color_manual(
values = c("blue", "red"),
labels = c("Positive", "Negative","All")
) +
theme_minimal()
})
output$hashtag_plot <- renderPlot({
if (input$input_hashtag != "") {
hashtag_data <- analyze_hashtag(global_trends, "hashtags", paste0("'",input$input_hashtag,"'"))
# Plot the sentiment over time
ggplot(hashtag_data, aes(x = date_interval)) +
geom_line(aes(y = sum_favourites_pos), color = 'blue') +
geom_line(aes(y = sum_favourites_neg), color = 'red') +
geom_line(aes(y = sum_favourites_all), color = 'black') +
labs(
title = "Normalized Sentiment Over Time",
x = "Date Interval",
y = "Number of Tweets",
color = "Legend"
) +
scale_x_date(date_breaks = "3 months", date_labels = "%,b %Y") +
scale_color_manual(
values = c("blue", "red","black"),
labels = c("Positive", "Negative","All")
) +
theme_minimal()
}
})
# Helper function to process the data and generate the category_counts
processEntitiesData <- function(selected_month) {
selected_date <- parse_date_time(selected_month, "b-y")
file_name <- paste0("data_", format(selected_date, format = "%b_%Y"))
data <- get(file_name)
# Create an empty dataframe
variable_sums <- colSums(data[, 17:34])
category_counts <- data.frame(Category = names(variable_sums), Count = variable_sums)
return(category_counts)
}
}
# Run the app
shinyApp(ui = ui, server = server)
setwd("C:/Users/s1723280/Documents/GitHub/data")
library(tidyverse)
library(igraph)
library(Matrix)
# Get the directory of the R script
script_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set the working directory
setwd(file.path(script_dir, "../data"))
source("functions.R")
# List all CSV files in the working directory
csv_files <- list.files(pattern = "*.csv")
# Load the CSV datasets into separate objects
for (file in csv_files) {
# Extract the month and year from the file name
month_year <- gsub("data_|.csv", "", file)
# Read the CSV file and assign it to a named object using the month-year as the name
assign(paste0("data_", month_year), read.csv(file))
}
# Load the lubridate package for date manipulation
library(lubridate)
# Define the start and end dates
start_date <- ymd("2020-01-01")
end_date <- ymd("2022-11-01")
# List to store the dataset objects
datasets <- list()
# Generate the dataset objects
current_date <- start_date
while (current_date <= end_date) {
dataset_name <- paste0("data_", format(current_date, "%b_%Y"))
dataset_object <- get(dataset_name)  # Assuming dataset objects are stored with the same name
datasets[[dataset_name]] <- dataset_object
current_date <- current_date + months(1)
}
# Iterate through the datasets
for (dataset_name in names(datasets)) {
dataset_object <- datasets[[dataset_name]]
# Generate the graph using hashtag_cooccurrence()
hashtag_cooccurrence(dataset_object)
}
library(tidyverse)
library(igraph)
library(Matrix)
# Get the directory of the R script
script_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set the working directory
setwd(file.path(script_dir, "../data"))
source("functions.R")
# List all CSV files in the working directory
csv_files <- list.files(pattern = "*.csv")
# Load the CSV datasets into separate objects
for (file in csv_files) {
# Extract the month and year from the file name
month_year <- gsub("data_|.csv", "", file)
# Read the CSV file and assign it to a named object using the month-year as the name
assign(paste0("data_", month_year), read.csv(file))
}
# Load the lubridate package for date manipulation
library(lubridate)
# Define the start and end dates
start_date <- ymd("2020-01-01")
end_date <- ymd("2022-11-01")
# List to store the dataset objects
datasets <- list()
# Generate the dataset objects
current_date <- start_date
while (current_date <= end_date) {
dataset_name <- paste0("data_", format(current_date, "%b_%Y"))
dataset_object <- get(dataset_name)  # Assuming dataset objects are stored with the same name
datasets[[dataset_name]] <- dataset_object
current_date <- current_date + months(1)
}
# Iterate through the datasets
for (dataset_name in names(datasets)) {
dataset_object <- datasets[[dataset_name]]
# Generate the graph using hashtag_cooccurrence()
graph <- hashtag_cooccurrence(dataset_object)
# Get the month and year from the dataset_name
month_year <- gsub("data_", "", dataset_name)
# Set the file name for the PNG
file_name <- paste0("graph_", month_year, ".png")
# Save the graph as a PNG file with the specified dimensions
png(file_name, width = 1000, height = 800)
plot(graph)
dev.off()
}
library(tidyverse)
library(igraph)
library(Matrix)
# Get the directory of the R script
script_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set the working directory
setwd(file.path(script_dir, "../data"))
source("functions.R")
# List all CSV files in the working directory
csv_files <- list.files(pattern = "*.csv")
# Load the CSV datasets into separate objects
for (file in csv_files) {
# Extract the month and year from the file name
month_year <- gsub("data_|.csv", "", file)
# Read the CSV file and assign it to a named object using the month-year as the name
assign(paste0("data_", month_year), read.csv(file))
}
# Load the lubridate package for date manipulation
library(lubridate)
# Define the start and end dates
start_date <- ymd("2020-01-01")
end_date <- ymd("2022-11-01")
# List to store the dataset objects
datasets <- list()
# Generate the dataset objects
current_date <- start_date
while (current_date <= end_date) {
dataset_name <- paste0("data_", format(current_date, "%b_%Y"))
dataset_object <- get(dataset_name)  # Assuming dataset objects are stored with the same name
datasets[[dataset_name]] <- dataset_object
current_date <- current_date + months(1)
}
library(ggplot2)
# ...
# Iterate through the datasets
for (dataset_name in names(datasets)) {
dataset_object <- datasets[[dataset_name]]
# Generate the graph using hashtag_cooccurrence()
graph <- hashtag_cooccurrence(dataset_object)
# Get the month and year from the dataset_name
month_year <- gsub("data_", "", dataset_name)
# Set the file name for the PNG
file_name <- paste0("graph_", month_year, ".png")
# Save the graph as a PNG file with the specified dimensions using ggsave()
ggsave(file_name, plot = graph, width = 10, height = 8, units = "in", dpi = 300)
}
